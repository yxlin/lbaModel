// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fptpdf
Rcpp::NumericVector fptpdf(Rcpp::NumericVector rt_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, bool verbose);
RcppExport SEXP _lbaModel_fptpdf(SEXP rt_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fptpdf(rt_r, parameter_r, is_positive_drift_r, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fptcdf
Rcpp::NumericVector fptcdf(Rcpp::NumericVector rt_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, bool verbose);
RcppExport SEXP _lbaModel_fptcdf(SEXP rt_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fptcdf(rt_r, parameter_r, is_positive_drift_r, verbose));
    return rcpp_result_gen;
END_RCPP
}
// n1PDF
Rcpp::NumericVector n1PDF(Rcpp::NumericVector rt_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, bool verbose);
RcppExport SEXP _lbaModel_n1PDF(SEXP rt_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(n1PDF(rt_r, parameter_r, is_positive_drift_r, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dlba
Rcpp::List dlba(Rcpp::NumericVector rt_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r);
RcppExport SEXP _lbaModel_dlba(SEXP rt_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    rcpp_result_gen = Rcpp::wrap(dlba(rt_r, parameter_r, is_positive_drift_r));
    return rcpp_result_gen;
END_RCPP
}
// plba
Rcpp::List plba(Rcpp::NumericVector rt_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, Rcpp::NumericVector time_parameter_r);
RcppExport SEXP _lbaModel_plba(SEXP rt_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP time_parameter_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameter_r(time_parameter_rSEXP);
    rcpp_result_gen = Rcpp::wrap(plba(rt_r, parameter_r, is_positive_drift_r, time_parameter_r));
    return rcpp_result_gen;
END_RCPP
}
// rlba_r
Rcpp::DataFrame rlba_r(Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, Rcpp::NumericVector time_parameter_r, unsigned int n, bool use_inverse_method, bool debug);
RcppExport SEXP _lbaModel_rlba_r(SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP time_parameter_rSEXP, SEXP nSEXP, SEXP use_inverse_methodSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameter_r(time_parameter_rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type use_inverse_method(use_inverse_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rlba_r(parameter_r, is_positive_drift_r, time_parameter_r, n, use_inverse_method, debug));
    return rcpp_result_gen;
END_RCPP
}
// theoretical_dlba
Rcpp::List theoretical_dlba(Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, Rcpp::NumericVector time_parameter_r);
RcppExport SEXP _lbaModel_theoretical_dlba(SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP time_parameter_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameter_r(time_parameter_rSEXP);
    rcpp_result_gen = Rcpp::wrap(theoretical_dlba(parameter_r, is_positive_drift_r, time_parameter_r));
    return rcpp_result_gen;
END_RCPP
}
// theoretical_plba
Rcpp::List theoretical_plba(Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, Rcpp::NumericVector time_parameter_r);
RcppExport SEXP _lbaModel_theoretical_plba(SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP time_parameter_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameter_r(time_parameter_rSEXP);
    rcpp_result_gen = Rcpp::wrap(theoretical_plba(parameter_r, is_positive_drift_r, time_parameter_r));
    return rcpp_result_gen;
END_RCPP
}
// dlba_inverse_external
Rcpp::NumericVector dlba_inverse_external(Rcpp::NumericVector rt_r, Rcpp::IntegerVector response_r, Rcpp::NumericMatrix parameter_r, Rcpp::LogicalVector is_positive_drift_r, Rcpp::NumericVector time_parameter_r);
RcppExport SEXP _lbaModel_dlba_inverse_external(SEXP rt_rSEXP, SEXP response_rSEXP, SEXP parameter_rSEXP, SEXP is_positive_drift_rSEXP, SEXP time_parameter_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rt_r(rt_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type response_r(response_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type parameter_r(parameter_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type is_positive_drift_r(is_positive_drift_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time_parameter_r(time_parameter_rSEXP);
    rcpp_result_gen = Rcpp::wrap(dlba_inverse_external(rt_r, response_r, parameter_r, is_positive_drift_r, time_parameter_r));
    return rcpp_result_gen;
END_RCPP
}
// validate_lba_parameters
bool validate_lba_parameters(const Rcpp::S4& rt_model_r, const Rcpp::NumericVector& parameters_r, bool debug);
RcppExport SEXP _lbaModel_validate_lba_parameters(SEXP rt_model_rSEXP, SEXP parameters_rSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type rt_model_r(rt_model_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_lba_parameters(rt_model_r, parameters_r, debug));
    return rcpp_result_gen;
END_RCPP
}
// simulate_lba_trials
Rcpp::DataFrame simulate_lba_trials(const Rcpp::S4& rt_model_r, const Rcpp::NumericVector& parameters_r, unsigned int n_trial, bool use_inverse_method, bool debug);
RcppExport SEXP _lbaModel_simulate_lba_trials(SEXP rt_model_rSEXP, SEXP parameters_rSEXP, SEXP n_trialSEXP, SEXP use_inverse_methodSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type rt_model_r(rt_model_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_trial(n_trialSEXP);
    Rcpp::traits::input_parameter< bool >::type use_inverse_method(use_inverse_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_lba_trials(rt_model_r, parameters_r, n_trial, use_inverse_method, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lbaModel_fptpdf", (DL_FUNC) &_lbaModel_fptpdf, 4},
    {"_lbaModel_fptcdf", (DL_FUNC) &_lbaModel_fptcdf, 4},
    {"_lbaModel_n1PDF", (DL_FUNC) &_lbaModel_n1PDF, 4},
    {"_lbaModel_dlba", (DL_FUNC) &_lbaModel_dlba, 3},
    {"_lbaModel_plba", (DL_FUNC) &_lbaModel_plba, 4},
    {"_lbaModel_rlba_r", (DL_FUNC) &_lbaModel_rlba_r, 6},
    {"_lbaModel_theoretical_dlba", (DL_FUNC) &_lbaModel_theoretical_dlba, 3},
    {"_lbaModel_theoretical_plba", (DL_FUNC) &_lbaModel_theoretical_plba, 3},
    {"_lbaModel_dlba_inverse_external", (DL_FUNC) &_lbaModel_dlba_inverse_external, 5},
    {"_lbaModel_validate_lba_parameters", (DL_FUNC) &_lbaModel_validate_lba_parameters, 3},
    {"_lbaModel_simulate_lba_trials", (DL_FUNC) &_lbaModel_simulate_lba_trials, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_lbaModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
